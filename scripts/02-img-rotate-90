#!/bin/env python3

from os import getenv
from pathlib import Path
from sys import stdin, argv, version
from wand.image import Image


def collect_files(allowed_extensions):
    """Collect files selected in nautilus or passed by the command line.
    Checks if files exist and are of the correct type(by file extension).
    Returns a list of Path() objects.
    Exits early if the files are invalid / non-existent.
    needs the following imports...
    from sys import stdin, argv"""

    if stdin.isatty():
        inList = argv[1:].copy()
    else:
        inList = getenv("NAUTILUS_SCRIPT_SELECTED_FILE_PATHS", "").splitlines()

    inList.sort()
    files = []
    for f in inList:
        file = Path(f)
        if file.suffix in allowed_extensions and file.exists():
            files.append(file)

    if len(files) < 1:
        print(
            "No files given. this script only allows files of types: ",
            f"'{', '.join(allowed_extensions)}",
        )
        exit(0)
    else:
        return files


def gen_new_name(f, suffix='', ext=''):
    """Take a pathlib.Path() object and optional suffix and/or extension.
    return a new name with the suffix and/or extension added."""

    fname = f.name.rsplit(".")[0]
    ex = ext if ext else f.suffix

    return f.with_name(fname + suffix + ex)


def rotate_image(f):
    out_file = f

    with Image(filename=f) as img:
        if len(img.sequence) > 1:
            with img.clone() as rotated:
                for img_frame in rotated.sequence:
                    with img_frame as frame:
                        frame.rotate(90)
                new_file = open(out_file, "wb")
                rotated.save(new_file)
                new_file.close()
        else:
            with img.clone() as rotated:
                rotated.rotate(90)
                new_file = open(out_file, "wb")
                rotated.save(new_file)
                new_file.close()

def process_files(files):
    """Takes a list of pathlib.Path() objects and does some processing (image / effects) on the files."""
    v = version.rsplit(" ")[0]
    v = [int(x) for x in v.split(".")]

    if v[0] >= 3 and v[1] >= 12:
        from concurrent.futures import ProcessPoolExecutor

        with ProcessPoolExecutor() as executor:
            executor.map(rotate_image, files)
    else:
        for f in files:
            rotate_image(f)


if __name__ == "__main__":
    allowed_extensions = [
        ".png",
        ".jpg",
        ".jpeg",
        ".gif",
        ".heic",
        ".webp",
    ]
    files = collect_files(allowed_extensions)
    process_files(files)
